import { AdminJS } from "adminjs";
import AdminJSExpress from "@adminjs/express";
import session from "express-session";
import ConnectMongoDBSession from "connect-mongodb-session";
import Product from "../models/product.js";
import Category from "../models/category.js";
import Order from "../models/order.js";
import User from "../models/user.js";
import Transaction from "../models/transaction.js";
import * as AdminJSMongoose from "@adminjs/mongoose";

import { dark, light, noSidebar } from "@adminjs/themes";

AdminJS.registerAdapter(AdminJSMongoose);

const DEFAULT_ADMIN = {
  email: "b@gmail.com",
  password: "123",
};

const authenticate = async (email, password) => {
  console.log("Login Attempt:", email, password);
  if (email === DEFAULT_ADMIN.email && password === DEFAULT_ADMIN.password) {
    console.log("Authentication successful!");
    return Promise.resolve(DEFAULT_ADMIN);
  }
  console.log("Authentication failed!");
  return null;
};

export const buildAdminJS = async (app) => {
  const admin = new AdminJS({
    resources: [
      {
        resource: Product,
      },
      {
        resource: Category,
      },
      {
        resource: Order,
      },
      {
        resource: User,
      },
      {
        resource: Transaction,
      },
    ],
    branding: {
      companyName: "Click Cart",
      withMadeWithLove: false,
      //favicon logo pending
    },
    defaultTheme: dark.id,
    availableThemes: [dark, light, noSidebar],
    rootPath: "/admin",
  });
  const MongoDBStore = ConnectMongoDBSession(session);
  const sessionStore = new MongoDBStore({
    uri: process.env.MONGO_URI,
    collection: "sessions",
  });
  const adminRoute = AdminJSExpress.buildAuthenticatedRouter(
    admin,
    {
      authenticate,
      cookieName: "adminjs",
      cookiePassword: process.env.COOKIE_PASSWORD,
    },
    null,
    {
      store: sessionStore,
      resave: true,
      saveUninitialized: true,
      secret: process.env.COOKIE_PASSWORD,
      cookie: {
        httpOnly: process.env.NODE_ENV === "production",
        secure: process.env.NODE_ENV === "production",
      },
      name: "adminjs",
    }
  );
  app.use(admin.options.rootPath, adminRoute);
};
